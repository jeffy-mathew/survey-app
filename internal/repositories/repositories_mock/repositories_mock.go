// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go

// Package repositories_mock is a generated GoMock package.
package repositories_mock

import (
	reflect "reflect"
	models "survey-platform/internal/models"

	gomock "github.com/golang/mock/gomock"
	ksuid "github.com/segmentio/ksuid"
)

// MockSurveyRepoInterface is a mock of SurveyRepoInterface interface.
type MockSurveyRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSurveyRepoInterfaceMockRecorder
}

// MockSurveyRepoInterfaceMockRecorder is the mock recorder for MockSurveyRepoInterface.
type MockSurveyRepoInterfaceMockRecorder struct {
	mock *MockSurveyRepoInterface
}

// NewMockSurveyRepoInterface creates a new mock instance.
func NewMockSurveyRepoInterface(ctrl *gomock.Controller) *MockSurveyRepoInterface {
	mock := &MockSurveyRepoInterface{ctrl: ctrl}
	mock.recorder = &MockSurveyRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveyRepoInterface) EXPECT() *MockSurveyRepoInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSurveyRepoInterface) Create(survey *models.Survey) (*models.Survey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", survey)
	ret0, _ := ret[0].(*models.Survey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSurveyRepoInterfaceMockRecorder) Create(survey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSurveyRepoInterface)(nil).Create), survey)
}

// Delete mocks base method.
func (m *MockSurveyRepoInterface) Delete(id ksuid.KSUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSurveyRepoInterfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSurveyRepoInterface)(nil).Delete), id)
}

// Entries mocks base method.
func (m *MockSurveyRepoInterface) Entries() map[ksuid.KSUID]models.Survey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entries")
	ret0, _ := ret[0].(map[ksuid.KSUID]models.Survey)
	return ret0
}

// Entries indicates an expected call of Entries.
func (mr *MockSurveyRepoInterfaceMockRecorder) Entries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entries", reflect.TypeOf((*MockSurveyRepoInterface)(nil).Entries))
}

// Get mocks base method.
func (m *MockSurveyRepoInterface) Get(id ksuid.KSUID) (*models.Survey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*models.Survey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSurveyRepoInterfaceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSurveyRepoInterface)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockSurveyRepoInterface) GetAll() ([]models.Survey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Survey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSurveyRepoInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSurveyRepoInterface)(nil).GetAll))
}

// Update mocks base method.
func (m *MockSurveyRepoInterface) Update(id ksuid.KSUID, survey *models.Survey) (*models.Survey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, survey)
	ret0, _ := ret[0].(*models.Survey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSurveyRepoInterfaceMockRecorder) Update(id, survey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSurveyRepoInterface)(nil).Update), id, survey)
}

// MockResponseRepoInterface is a mock of ResponseRepoInterface interface.
type MockResponseRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockResponseRepoInterfaceMockRecorder
}

// MockResponseRepoInterfaceMockRecorder is the mock recorder for MockResponseRepoInterface.
type MockResponseRepoInterfaceMockRecorder struct {
	mock *MockResponseRepoInterface
}

// NewMockResponseRepoInterface creates a new mock instance.
func NewMockResponseRepoInterface(ctrl *gomock.Controller) *MockResponseRepoInterface {
	mock := &MockResponseRepoInterface{ctrl: ctrl}
	mock.recorder = &MockResponseRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseRepoInterface) EXPECT() *MockResponseRepoInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockResponseRepoInterface) Create(response *models.Response) (*models.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", response)
	ret0, _ := ret[0].(*models.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockResponseRepoInterfaceMockRecorder) Create(response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResponseRepoInterface)(nil).Create), response)
}

// Entries mocks base method.
func (m *MockResponseRepoInterface) Entries() map[ksuid.KSUID][]models.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entries")
	ret0, _ := ret[0].(map[ksuid.KSUID][]models.Response)
	return ret0
}

// Entries indicates an expected call of Entries.
func (mr *MockResponseRepoInterfaceMockRecorder) Entries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entries", reflect.TypeOf((*MockResponseRepoInterface)(nil).Entries))
}

// GetBySurveyID mocks base method.
func (m *MockResponseRepoInterface) GetBySurveyID(surveyID ksuid.KSUID) ([]models.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySurveyID", surveyID)
	ret0, _ := ret[0].([]models.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySurveyID indicates an expected call of GetBySurveyID.
func (mr *MockResponseRepoInterfaceMockRecorder) GetBySurveyID(surveyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySurveyID", reflect.TypeOf((*MockResponseRepoInterface)(nil).GetBySurveyID), surveyID)
}
